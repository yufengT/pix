cmake_minimum_required(VERSION 3.8)
project(can_interface)

if(CMAKE_COMPILER_IS_GNUCXX OR CMAKE_CXX_COMPILER_ID MATCHES "Clang")
  add_compile_options(-Wall -Wextra -Wpedantic)
endif()

# find dependencies
find_package(ament_cmake REQUIRED)
find_package(rclcpp REQUIRED)

add_executable(control_node 
  src/control_node.cpp
  src/pix.cpp 
  
  )
target_include_directories(control_node PUBLIC
  $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/include>
  $<INSTALL_INTERFACE:include>)
target_compile_features(control_node PUBLIC c_std_99 cxx_std_17)  # Require C99 and C++17
ament_target_dependencies(
  control_node
  "rclcpp"
)

install(TARGETS control_node
  DESTINATION lib/${PROJECT_NAME})

if(BUILD_TESTING)
  find_package(ament_lint_auto REQUIRED)
  # the following line skips the linter which checks for copyrights
  # comment the line when a copyright and license is added to all source files
  set(ament_cmake_copyright_FOUND TRUE)
  # the following line skips cpplint (only works in a git repo)
  # comment the line when this package is in a git repo and when
  # a copyright and license is added to all source files
  set(ament_cmake_cpplint_FOUND TRUE)
  ament_lint_auto_find_test_dependencies()
endif()

ament_package()

include_directories(
  include
  ${ament_cmake_INCLUDE_DIRS}
)

	
	
# add_executable(control_node 
#     src/control_node.cpp
#     src/pix.cpp 
    
#     )
    
# ament_target_dependencies(
#     control_node
#   "rclcpp"
# )
# install(TARGETS control_node
#   DESTINATION lib/${PROJECT_NAME})

add_executable(test_node 
    src/test_node.cpp
    
    )
    
ament_target_dependencies(
    test_node
  "rclcpp"
)
install(TARGETS test_node
  DESTINATION lib/${PROJECT_NAME})

